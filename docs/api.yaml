openapi: 3.0.3
info:
  title: LeetCode Clone API
  description: TODO
  version: 0.1.0
servers:
  - url: http://localhost:5000
  - url: http://192.168.7.38:5000
  - url: http://192.168.7.47:5000

paths:
  /auth/register:
    post:
      tags: [ Authorization ]
      summary: Register new user
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /auth/login:
    post:
      tags: [ Authorization ]
      summary: Login a user
      description: Login a user and return a JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /auth/refresh_tokens:
    post:
      tags: [ Authorization ]
      summary: Refresh tokens
      description: Get a new JWT tokens with a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /auth/my_info:
    get:
      tags: [ Authorization ]
      summary: Get user information
      description: Authenticated users only. Get user information.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /auth/users:
    get:
      tags: [ Authorization ]
      summary: Get all users
      description: Admin only. Get list of users.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /auth/user/{user_id}/change_password:
    patch:
      tags: [ Authorization ]
      summary: Change password
      description: Admin only. Change user password.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
            example: 8df7d0a3-647a-4770-a3f7-85b67154572b
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - password
              properties:
                id:
                  type: string
                  format: uuid
                password:
                  type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /auth/user/{user_id}/change_admin_permission:
    patch:
      tags: [ Authorization ]
      summary: Change user permissions
      description: Admin only. Set/revoke user admin permission.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
            format: uuid
            example: 8df7d0a3-647a-4770-a3f7-85b67154572b
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - is_admin
              properties:
                id:
                  type: string
                  format: uuid
                is_admin:
                  type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /articles/practice:
    get:
      tags: [ Article ]
      summary: Get practice article
      description: No authentication required. Get practice article.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /articles/available_attributes:
    get:
      tags: [ Article ]
      summary: Get available article attributes
      description: Authenticated users only. Get available article attributes that have been created already.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required: [ categories ]
                properties:
                  categories:
                    type: array
                    items:
                      type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /articles/list:
    get:
      tags: [ Article ]
      summary: Get articles list
      description: Authenticated users only. Get articles list (sorted and/or filtered) with pagination. <br> Articles here are returned with empty content field. When you want to display article content, use GET /articles/{id} instead.
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search query string
        - in: query
          name: categories
          schema:
            type: array
            items:
              type: string
          description: List of categories separated by comma
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleListParams'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - articles
                  - pagination
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /articles/:
    post:
      tags: [ Article ]
      summary: Create article
      description: Admin only. Create article.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleCreateInput'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /articles/{article_id}:
    parameters:
      - in: path
        name: article_id
        required: true
        schema:
          type: string
          format: uuid
          example: 8df7d0a3-647a-4770-a3f7-85b67154572b

    get:
      tags: [ Article ]
      summary: Get article
      description: Authenticated users only. Get article by ID.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

    patch:
      tags: [ Article ]
      summary: Update article by ID
      description: Admin only. Update article by ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleUpdateInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

    delete:
      tags: [ Article ]
      summary: Delete article by ID
      description: Admin only. Delete article by ID.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /problems/available_attributes:
    get:
      tags: [ Problems ]
      summary: Get available problems attributes
      description: Authenticated users only. Get available problems attributes that have been created already.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required: [ categories, difficulties ]
                properties:
                  categories:
                    type: array
                    items:
                      type: string
                  difficulties:
                    type: array
                    items:
                      type: string

  /problems/list:
    get:
      tags: [ Problems ]
      summary: Get problems list
      description: Authenticated users only. Get problems list (sorted and/or filtered) with pagination.
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search query string
        - in: query
          name: category
          schema:
            type: array
            items:
              type: string
          description: List of categories
        - in: query
          name: difficulty
          schema:
            type: array
            items:
              type: string
          description: List of difficulties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskListParams'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - tasks
                  - pagination
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /problems/:
    post:
      tags: [ Problems ]
      summary: Create new problem
      description: Admin only. Create new problem.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - task
              properties:
                task:
                  $ref: '#/components/schemas/TaskInput'
                task_templates:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateTaskTemplateInput'
                test_cases:
                  type: array
                  items:
                    $ref: '#/components/schemas/TestCaseInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /problems/{task_id}:
    parameters:
      - in: path
        name: task_id
        required: true
        schema:
          type: string
          format: uuid
        description: Task ID

    get:
      tags: [ Problems ]
      summary: Get problem details
      description: Authenticated users only. Get full problem details.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

    patch:
      tags: [ Problems ]
      summary: Update problem task
      description: Admins only. Update problem task.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

    delete:
      tags: [ Problems ]
      summary: Delete problem
      description: Admins only. Delete problem completely (including all users statistics).
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /problems/{task_id}/template/:
    post:
      tags: [ Problems ]
      summary: Create new task code template
      description: Admins only. Create new code template for existing problem.
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
            format: uuid
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskTemplateInput'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /problems/{task_id}/template/{template_id}:
    parameters:
      - in: path
        name: task_id
        required: true
        schema:
          type: string
          format: uuid
        description: Task ID
      - in: path
        name: template_id
        required: true
        schema:
          type: string
          format: uuid
        description: Template ID

    patch:
      tags: [ Problems ]
      summary: Update task code template
      description: Admins only. Update task code template for existing problem.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskTemplateInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

    delete:
      tags: [ Problems ]
      summary: Delete task code template
      description: Admins only. Delete task code template for existing problem.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /problems/{task_id}/testcase/:
    post:
      tags: [ Problems ]
      summary: Create new test case
      description: Admins only. Create new test case for existing problem.
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: string
            format: uuid
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseInput'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /problems/{task_id}/testcase/{case_id}:
    parameters:
      - in: path
        name: task_id
        required: true
        schema:
          type: string
          format: uuid
        description: Task ID
      - in: path
        name: case_id
        required: true
        schema:
          type: string
          format: uuid
        description: Test case ID

    patch:
      tags: [ Problems ]
      summary: Update test case
      description: Admins only. Update test case for existing problem.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

    delete:
      tags: [ Problems ]
      summary: Delete test case
      description: Admins only. Delete test case for existing problem.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /progress/:
    get:
      tags: [ Progress ]
      summary: Get progress
      description: Authenticated users only. Get task completion progress for user.
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProgress'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /progress/statistics:
    get:
      tags: [ Progress ]
      summary: Get statistics
      description: Authenticated users only. Get task completion statistics for user.
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [category, difficulty]
            description: Data type to base statistics on
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatistic'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

components:
  schemas:
    StatusResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    CreateUserInput:
      type: object
      required:
        - username
        - password
        - first_name
        - last_name
      properties:
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string

    User:
      type: object
      required:
        - id
        - username
        - first_name
        - last_name
        - is_admin
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        is_admin:
          type: boolean

    Tokens:
      type: object
      required:
        - access_token
        - access_token_exp
        - refresh_token
        - refresh_token_exp
      properties:
        access_token:
          type: string
        access_token_exp:
          type: integer
        refresh_token:
          type: string
        refresh_token_exp:
          type: integer

    TaskInput:
      type: object
      required:
        - name
        - category
        - difficulty
      properties:
        name:
          type: string
          description: Task name
          example: Bubble Sort
        description:
          type: string
          description: Task long description
          example: Create a simple bubble sorting algorithm
        category:
          type: string
          description: Task category
          example: Sorting
        difficulty:
          type: string
          description: Task difficulty
          example: Easy
        runtime_limit:
          type: integer
          format: float
          description: Runtime limit in seconds
          example: 10.0
          default: 5.0
        memory_limit:
          type: integer
          format: int
          description: Memory limit in kilobytes
          example: 256000
          default: 128000

    Task:
      type: object
      required:
        - id
        - number
        - name
        - description
        - category
        - difficulty
        - runtime_limit
        - memory_limit
      properties:
        allOf:
          $ref: '#/components/schemas/TaskInput'
        id:
          type: string
          format: uuid
          description: Task ID
          example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384
        number:
          type: integer
          description: Task index
          example: 5

    CreateTaskTemplateInput:
      type: object
      required:
        - language_id
        - template
        - wrapper
      properties:
        allOf:
          $ref: '#/components/schemas/UpdateTaskTemplateInput'
        language_id:
          type: integer
          description: Programming language ID. 63 for JS, 74 for TS
          enum: [ 63, 74 ]
          example: 74

    UpdateTaskTemplateInput:
      type: object
      required:
        - template
        - wrapper
      properties:
        template:
          type: string
          description: Task template in given programming language
          example: TODO
        wrapper:
          type: string
          description: Task wrapper in given programming language
          example: TODO

    TaskTemplate:
      type: object
      required:
        - id
        - task_id
        - language_id
        - template
        - wrapper
      properties:
        allOf:
          $ref: '#/components/schemas/CreateTaskTemplateInput'
        id:
          type: string
          format: uuid
          description: Task template ID
          example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384
        task_id:
          type: string
          format: uuid
          description: Parent task ID
          example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384

    TestCaseInput:
      type: object
      required:
        - input
        - output
      properties:
        input:
          type: string
          description: Test case input as string
          example: TODO
        output:
          type: string
          description: Test case output as string
          example: TODO

    TaskTestCase:
      type: object
      required:
        - id
        - number
        - task_id
        - input
        - output
      properties:
        allOf:
          $ref: '#/components/schemas/TestCaseInput'
        id:
          type: string
          format: uuid
          description: Test case ID
          example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384
        number:
          type: integer
          description: Test case index (grouped by problem)
          example: 3
        task_id:
          type: string
          format: uuid
          description: Parent task ID
          example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384

    Problem:
      type: object
      required:
        - task
        - task_templates
        - test_cases
      properties:
        task:
          $ref: '#/components/schemas/Task'
        task_templates:
          type: array
          items:
            $ref: '#/components/schemas/TaskTemplate'
        test_cases:
          type: array
          items:
            $ref: '#/components/schemas/TaskTestCase'

    TaskListParams:
      type: object
      properties:
        sort:
          type: object
          required:
            - "number"
          properties:
            "number":
              type: string
              enum: [ asc, desc ]
          default: desc
          description: Sort by task index
        pagination:
          type: object
          required:
            - limit
          properties:
            limit:
              type: integer
              example: 15
              default: 30
              description: Number of tasks per page
            after_id:
              type: string
              format: uuid
              description: ID of the last received task
              example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384

    Article:
      type: object
      required:
        - id
        - title
        - author_id
        - content
        - categories
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Article ID
          example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384
        title:
          type: string
          description: Article title
          example: Example Article
        author_id:
          type: string
          format: uuid
          description: Author ID
          example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384
        content:
          type: string
          description: Article content (text)
        categories:
          type: array
          items:
            type: string
          description: List of article category tags
          example: [ Sorting, Algorithms ]
        created_at:
          type: integer
          format: uint64
          description: Creation time in milliseconds in standard UNIX format
          example: 1705417437

    ArticleListParams:
      type: object
      properties:
        sort:
          type: object
          required:
            - "date"
          properties:
            "number":
              type: string
              enum: [ asc, desc ]
          default: desc
          description: Sort by article creation date
        pagination:
          type: object
          required:
            - limit
          properties:
            limit:
              type: integer
              example: 15
              default: 30
              description: Number of tasks per page
            after_id:
              type: string
              format: uuid
              description: ID of the last received task
              example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384

    ArticleCreateInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Article title
          example: Example Article
        content:
          type: string
          description: Article content (text). Markdown supported.
        categories:
          type: array
          items:
            type: string
          description: List of article category tags
          example: [ Sorting, Algorithms ]

    ArticleUpdateInput:
      type: object
      allOf:
        - $ref: '#/components/schemas/ArticleCreateInput'

    ProgressData:
      type: object
      required: [ status, task_ids ]
      properties:
        status:
          type: string
          enum: [ in_progress, completed ]
        task_ids:
          type: array
          items:
            type: string
            format: uuid
            example: c6d0c29e-aa2d-45c5-b203-bbf9ecf41384
            description: Task ID

    UserProgress:
      type: object
      required: [ progress_data ]
      properties:
        progress_data:
          type: array
          items:
            $ref: '#/components/schemas/ProgressData'

    StatisticData:
      type: object
      required: [ param, count_done, count_total ]
      properties:
        param:
          type: string
          description: Category name or difficulty level - based on requested statistics type
          example: normal
        count_done:
          type: integer
          description: Number of tasks done from said category/difficulty level
          example: 5
        count_total:
          type: integer
          description: Total number of task from said category/difficulty level
          example: 10

    UserStatistic:
      type: object
      required: [ type , statistic_data ]
      properties:
        type:
          type: string
          enum: [ difficulty, category ]
          description: Requested statistics type
        statistic_data:
          type: array
          items:
            $ref: '#/components/schemas/StatisticData'

    Pagination:
      type: object
      required:
        - after_id
      properties:
        after_id:
          type: string
          format: uuid
          description: Last item ID from given page
          example: 5c7f8d0d-5a1e-4b7d-a1b9-d2b0a2c3c4d2

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

security:
  - BearerAuth: [ ]
